<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace属性是名称空间，必须唯一 -->
<mapper namespace="com.edu.victor.Dao.CourseDao">
    <!--课程下的章节和小节查询-->
    <resultMap id="CourseMap" type="CourseDtoForSpecific">
        <id column="course_id" property="id"/>
        <collection property="chapterDtoList" column="course_id" ofType="ChapterDto" select="getChapterByStep"/>
    </resultMap>

    <resultMap id="ChapterMap" type="ChapterDto">
        <id column="chapter_id" property="id"/>
        <collection property="sectionList" column="chapter_id" select="getSectionByStep" ofType="Section"/>
    </resultMap>
    <!--针对学生-->
    <resultMap id="CourseMapForStu" type="CourseDtoSpecificForStu">
        <id column="course_id" property="id"/>
        <collection property="chapterDtoList" column="{courseId = course_id,stuId=stuId}" ofType="ChapterDtoForStu" select="getChapterByStepForStu"/>
    </resultMap>
    <resultMap id="ChapterMapForStu" type="ChapterDtoForStu">
        <id column="chapter_id" property="id"/>
        <collection property="sectionList" column="{chapterId =chapter_id,stuId = stuId}" ofType="SectionDtoForStu" select="getSectionByStepForStu">
        </collection>
    </resultMap>
    <resultMap id="PageCourseware" type="Page">
        <collection property="pageData" ofType="Courseware" autoMapping="true"/>
    </resultMap>
    <resultMap id="PageCourse" type="Page">
        <collection property="pageData" ofType="CourseDtoForSimple" autoMapping="true"/>
    </resultMap>
    <resultMap id="PageCourseForApp" type="Page">
        <collection property="pageData" ofType="CourseForApp" autoMapping="true"/>
    </resultMap>
    <resultMap id="LearningProgressMap" type="LearningProgress" autoMapping="true">
        <association property="student" javaType="StudentLearingProgressInfoDto" autoMapping="true">

        </association>
    </resultMap>
    <resultMap id="PageLearningProgress" type="Page" autoMapping="true">
        <collection property="pageData" resultMap="LearningProgressMap" autoMapping="true"/>
    </resultMap>
    <!--获取课程章节信息-->
    <select id="getCourseInfo" resultMap="CourseMap">
        select id as course_id from course where id = #{id};
    </select>
    <select id="getChapterByStep" resultMap="ChapterMap">
        select id as chapter_id,title,superior_id,weights from course_chapter where superior_id = #{courseId} order by weights;
    </select>
    <select id="getSectionByStep" resultType="Section">
        select id,title,superior_id,url,weights from course_section where superior_id = #{id} order by weights;
    </select>
    <!--针对app页面-->
    <select id="getCourseInfoForStu" resultMap="CourseMapForStu">
        select id as course_id ,#{stuId} as stuId from course where id = #{id};
    </select>
    <select id="getChapterByStepForStu" resultMap="ChapterMapForStu">
        select id as chapter_id,title,superior_id,#{stuId} as stuId from course_chapter where superior_id = #{courseId} order by weights;
    </select>
    <select id="getSectionByStepForStu" resultType="SectionDtoForStu">
        select course_section.id,title,superior_id,url,IFNULL(play_record.over,0) as  `over`, location from course_section left join play_record on course_section.id = play_record.sec_id and play_record.stu_id = #{stuId} where superior_id = #{chapterId} order by weights;
    </select>

    <select id="searchCoursewareByPage" resultMap="PageCourseware">
        select id,`time`,url,title from courseware where superior_id = #{filter.id} order by `time` desc
    </select>
    <select id="searchCoursesByPage" resultMap="PageCourse">
      select course.id as id,teacher.name as teaName,title,weights,url,code,description from course join teacher on course.tea_id = teacher.id <where>
        <if test="filter.id != null">
            tea_id = #{filter.id}
        </if>
         </where>
         order by weights,id
    </select>

    <insert id="addCourse" parameterType="Course">
        insert into course(tea_id,title,description,url,code,weights)value (#{teaId},#{title},#{description},#{url},#{code},#{weights});
    </insert>
    <insert id="addChapter" parameterType="Chapter">
        insert into course_chapter(title,weights,superior_id,tea_id)value (#{title},#{weights},#{superiorId},#{teaId});
    </insert>
    <insert id="addSection" parameterType="Section">
        insert into course_section(title,weights,superior_id,url,tea_id)value (#{title},#{weights},#{superiorId},#{url},#{teaId});
    </insert>
    <insert id="addCourseware" parameterType="Courseware">
      insert into courseware(superior_id,title,url,tea_id)value
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.superiorId},#{item.title},#{item.url},#{item.teaId})
        </foreach>
    </insert>

   <!-- <select id="searchChapter" resultType="Chapter">
        select * from course_chapter where superior_id = #{id} order by weights;
    </select>
    <select id="searchSection" resultType="Section">
        select * from course_section where superior_id = #{id} order by weights;
    </select>-->
    <select id="getCourseImageUrl" resultType="String">
        select url from course where id = #{id};
    </select>
    <select id="getCoursewareUrl" resultType="String">
        select url from courseware where id = #{id};
    </select>

    <select id="getSectionUrl" resultType="String">
        select url from course_section where id = #{id};
    </select>
    <select id="getSectionUrlByChapter" resultType="String">
        select url from course_section where superior_id = #{id};
    </select>
    <select id="getSectionUrlByCourse" resultType="String">
    select url from course_section where superior_id in  (SELECT id from course_chapter where superior_id = #{id});

    </select>
    <select id="getCoursewareUrlByCourse" resultType="String">
        select url from courseware where superior_id = #{id};
    </select>
    <select id="getUngraduatedStuByCourse" resultType="User">
        select stu_id as id,0 as is_teacher from stu_course where course_id = #{id} and stu_course.graduated = 0
    </select>
    <select id="getStuLearningProgressByPage" resultMap="PageLearningProgress">
        select name,username,phone,stu_course.id as id,course_id,learning_progress,graduated from stu join stu_course on stu.id =stu_course.stu_id
         <where>
            course_id = #{filter.courseId}
         <if test="filter.stuNum != null">
             and stu.username like "%${filter.stuNum}%"
         </if>
         <if test="filter.stuName != null">
             and name like "%${filter.stuName}%"
         </if>
    </where>
    order by graduated

    </select>
    <delete id="deleteCourse">
        delete from course where id = #{0} and tea_id = #{1};
    </delete>
    <delete id="deleteChapter">
        delete from course_chapter where id = #{0} and tea_id = #{1};
    </delete>
    <delete id="deleteSection">
        delete from course_section where id = #{0} and tea_id = #{1};
    </delete>
    <delete id="deleteCourseware">
        delete from courseware where id = #{0} and tea_id = #{1};
    </delete>
    <!--课程信息更改-->
    <update id="updateCourseInfo" >
        update course
        <set>
        id =#{id},
        <if test="title != null">
            title = #{title},
        </if>
        <if test="description != null">
            description = #{description},
        </if>
        <if test="code != null">
            code = #{code},
        </if>
        <if test="weights != null">
            weights = #{weights}
        </if>
    </set>
      where id = #{id} and tea_id = #{teaId};
    </update>
    <!--章节信息的更改-->
    <update id="updateChapterInfo">
        update course_chapter
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="weights != null">
                weights = #{weights}
            </if>
        </set>
        where id = #{id} and tea_id = #{teaId};
    </update>
    <!--小节信息更改-->
    <update id="updateSectionInfo">
        update course_section
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="weights != null">
                weights = #{weights},
            </if>
            <if test="superiorId != null"/>
              superior_id = #{superiorId}
        </set>
        where id = #{id} and tea_id = #{teaId};
    </update>
    <select id="courseBelongTo" resultType="Integer">
        select tea_id from course where id = #{courseId}
    </select>
    <update id="closeCourse">
        update stu_course set graduated = 1 where graduated = 0 and course_id = #{courseId} and stu_id in
        <foreach collection="userList" open="(" close=")" separator="," item="user">
            #{user.id}
        </foreach>
    </update>
    <!--APP端所有课程-->
    <select id="searchAllCoursesByPage" resultMap="PageCourseForApp">
        select course.id as id,title,description,IFNULL(stu_course.id,0) as alreadyIn, url,graduated from course  join teacher on course.tea_id = teacher.id left join stu_course on stu_course.course_id = course.id and stu_id = #{filter.stuId} where (graduated is null or graduated = 0)
            <if test="filter.title != null">
               and title like "%${filter.title}%"
            </if>order by weights,id
    </select>
    <!--APP端我的课程-->
    <select id="searchMyCoursesByPage" resultMap="PageCourseForApp">
        select course.id as id,title,url,description,stu_id,graduated from course join teacher join stu_course on course.tea_id = teacher.id and stu_course.course_id = course.id
        where stu_course.stu_id = #{filter.stuId} order by weights,id
    </select>

    <select id="authCourseCode" resultType="Integer">
        select id from course where id = #{id} and code = #{code}
    </select>
    <insert id="addStuToCourse">
        insert into stu_course(course_id,stu_id)value (#{courseId},#{stuId})
    </insert>
    <!--
    <select id="isSatisfied" resultType="Boolean">
        select progress > 95 from stu_course where stu_id =#{stuId} and course_id = #{courseId};
    </select>
    <update id="graduate">
        update stu_course set graduated = 1 where stu_id = #{stuId} and course_id = #{courseId} and progress >= 95.0;
    </update>
    -->
    <!--用于学生学习进度-->
    <select id="getAllCourse" resultType="Integer">
        select id from course;
    </select>
    <select id="getAllStudentsByCourse" resultType="Integer">
        select stu_id from stu_course where course_id = #{id};
    </select>
    <select id="getStudentVideoPlaySituation" resultType="VideoPlaySituation">
        select count(course_section.id) as total, count(`over` = 1 or null) as alreadyOver from course_section left join play_record on play_record.sec_id = course_section.id and play_record.stu_id = #{stuId} where course_section.superior_id in (select course_chapter.id from course_chapter join course on course_chapter.superior_id = course.id where course.id = #{courseId})
    </select>
    <update id="updateStudentStudyProgress">
        update stu_course set learning_progress = #{progress} where stu_id = #{stuId} and course_id = #{courseId};
    </update>
</mapper>

